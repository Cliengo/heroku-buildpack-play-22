#!/usr/bin/env bash
set -ex  # habilita debug + salir en error

# bin/compile <build-dir> <cache-dir> <env-dir>

PLAY_URL=https://repo1.maven.org/maven2/com/google/code/maven-play-plugin/org/playframework/play/1.4.5/play-1.4.5-framework.zip
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

BIN_DIR=$(cd $(dirname $0); pwd)
echo "BIN_DIR is $BIN_DIR"

# common functions (puedes poner aquí las funciones que usas de common.sh si quieres)

export_env_dir() {
  env_dir=$1
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH|JAVA_OPTS)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls "$env_dir"); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat "$env_dir/$e")"
      :
    done
  fi
}

get_play_version() {
  local file=${1?"No file specified"}

  if [ ! -f "$file" ]; then
    return 0
  fi

  grep -P '.*-.*play[ \t]+[0-9\.]' "$file" | sed -E -e 's/[ \t]*-[ \t]*play[ \t]+([0-9A-Za-z\.]*).*/\1/'
}

check_compile_status() {
  if [ "${PIPESTATUS[*]}" != "0 0" ]; then
    echo " !     Failed to build Play! application"
    rm -rf "$CACHE_DIR/$PLAY_PATH"
    echo " !     Cleared Play! framework from cache"
    exit 1
  fi
}

install_openjdk() {
  local java_version=$1

  echo "Installing OpenJDK $java_version..."
  # Aquí deberías adaptar la instalación según el java_version, por ejemplo:
  # - Descargar un JDK específico
  # - Extraerlo en el lugar correcto (ejemplo: $BUILD_DIR/.jdk)
  # Por simplicidad, aquí solo hacemos un echo.
  # Puedes incluir la lógica que tengas o usar openjdk descargado ya listo.

  # Ejemplo básico para java 1.8:
  if [[ "$java_version" == "1.8" || "$java_version" == "8" ]]; then
    echo "Simulando instalación de OpenJDK 8..."
    # wget o curl + tar -xf + permisos, etc.
  else
    echo "Java version $java_version no soportada en esta demo."
    exit 1
  fi
}

detect_java_version() {
  if [ -f "$BUILD_DIR/system.properties" ]; then
    grep '^java.runtime.version=' "$BUILD_DIR/system.properties" | cut -d= -f2
  else
    echo "1.6"
  fi
}

export_env_dir "$ENV_DIR"

# create the cache dir if it doesn't exist
mkdir -p "$CACHE_DIR"

# create default system.properties if missing
if [ ! -f "${BUILD_DIR}/system.properties" ]; then
  echo "java.runtime.version=1.6" > "${BUILD_DIR}/system.properties"
fi

echo "Detecting Java version..."
javaVersion=$(detect_java_version)
echo "Java version detected: $javaVersion"

echo -n "-----> Installing OpenJDK ${javaVersion}..."
install_openjdk "$javaVersion"
echo " done"

PLAY_PATH=".play"
IVY_PATH=".ivy2"

cd "$BUILD_DIR"

echo "Unpacking cache directories..."
for DIR in "$PLAY_PATH" "$IVY_PATH" ; do
  rm -rf "$DIR"
  if [ -d "$CACHE_DIR/$DIR" ]; then
    echo "Restoring $DIR from cache"
    cp -r "$CACHE_DIR/$DIR" "$DIR"
  else
    echo "No cached directory $DIR"
  fi
done

if [ -d "${IVY_PATH}-overlay" ]; then
  echo -n "-----> Installing custom Ivy files..."
  mkdir -p "$IVY_PATH"
  mv "${IVY_PATH}-overlay"/* "$IVY_PATH"
  echo " done"
fi

PLAY_VERSION=$(get_play_version conf/dependencies.yml)
DEFAULT_PLAY_VERSION="1.3.1"
VERSION_DECLARED=true

if [ -z "$PLAY_VERSION" ] ; then
  PLAY_VERSION=$DEFAULT_PLAY_VERSION
  VERSION_DECLARED=false
  echo "-----> WARNING: Play! version not specified in dependencies.yml. Default version: $PLAY_VERSION being used...."
fi

install_play() {
  local version=$1
  echo "Installing Play! version $version..."
  # Aquí tu lógica para instalar Play! (puedes tomarla del common.sh que tienes)
  # Por simplicidad dejamos un echo.
}

if [ ! -f "$PLAY_PATH/play" ]; then
  echo "Play framework not found. Installing version $PLAY_VERSION"
  install_play "$PLAY_VERSION"
else
  INSTALLED_PLAY_VERSION=$(cat "$PLAY_PATH/framework/src/play/version")
  echo "Installed Play version: $INSTALLED_PLAY_VERSION, Desired version: $PLAY_VERSION"
  if [ "$INSTALLED_PLAY_VERSION" != "$PLAY_VERSION" ] && $VERSION_DECLARED ; then
    echo "-----> Updating Play! version. Previous version was $INSTALLED_PLAY_VERSION. Updating to $PLAY_VERSION..."
    rm -rf "$PLAY_PATH"
    install_play "$PLAY_VERSION"
  fi
fi

echo "-----> Building Play! application..."
"$PLAY_PATH/play" version | sed -u 's/^/       /'

APP_DIR=./
echo "       Building Play! application at directory $APP_DIR"

DEPENDENCIES_CMD="$PLAY_PATH/play dependencies $APP_DIR --forProd --forceCopy --silent -Duser.home=$BUILD_DIR 2>&1"
echo "       Resolving dependencies: $DEPENDENCIES_CMD"
eval "$DEPENDENCIES_CMD" | sed -u 's/^/       /'
check_compile_status

PRECOMPILE_CMD="$PLAY_PATH/play precompile $APP_DIR --silent 2>&1"
echo "       Precompiling: $PRECOMPILE_CMD"
eval "$PRECOMPILE_CMD" | sed -u 's/^/       /'
check_compile_status

echo "Caching Play! framework and Ivy dirs..."
mkdir -p "$CACHE_DIR"
for DIR in "$PLAY_PATH" "$IVY_PATH" ; do
  rm -rf "$CACHE_DIR/$DIR"
  cp -r "$DIR" "$CACHE_DIR/$DIR"
done

PROFILE_PATH="$BUILD_DIR/.profile.d/play.sh"
mkdir -p "$(dirname "$PROFILE_PATH")"
echo 'export PATH="/app/.play:/app/.jdk/bin:/app/.tools:$PATH"' >> "$PROFILE_PATH"

echo "Removing build time dependencies from slug..."
rm -fr "$IVY_PATH"
remove_play() {
  local buildDir=$1
  local playVersion=$2
  rm -rf "${buildDir}/tmp-play-unzipped"
  rm -f "${buildDir}/play-${playVersion}.zip"
}
remove_play "$BUILD_DIR" "$PLAY_VERSION"

if [ ! -f Procfile ]; then
  echo "-----> No Procfile found. Will use the following default process: "
  echo "       play run --http.port=\$PORT \$PLAY_OPTS"
fi
